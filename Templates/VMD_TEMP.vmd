# This is the vmd template file.
#   This file contains the template of the TCL script that tells VMD how to render the code
#   The settings that are changeable start with a dollar sign -'$' e.g. $variable
#
#   The python code simply reads this file, replaces any variables with values from the code
#   and saves it as the vmd source file (./src/TCL/MainProcess.tcl)
#

#Log users changes to a file
logfile $vmd_log_file

# Will load files into VMD and render them as PostScript files.
# Useful in producing lots of .ps files from lots of cube files.
#display resize 1600 900 #Producing bugs

set imag_P_col $imag_pos_col
set imag_N_col $imag_neg_col
set real_P_col $real_pos_col
set real_N_col $real_neg_col
set dens_col   $density_color

proc load_file { filename mol_id neg_col_id pos_col_id } {
	set mol_name $filename

	mol new $mol_name

	# Add 1 more representation for the negative isosurface
	mol addrep $mol_id
   #Visualising the isosurfaces
	mol modstyle 0 $mol_id Isosurface -$isoval 0 $iso_type 0 1 1
	mol modcolor 0 $mol_id ColorID $neg_col_id

	mol modstyle 1 $mol_id Isosurface $isoval 0 $iso_type 0 1 1
	mol modcolor 1 $mol_id ColorID $pos_col_id
    
    # Add atoms representation
    if {$mol_id == 0 } {
    	mol addrep $mol_id
	    mol modstyle 2 $mol_id $atom_style 1.000000 0.600000 20.000000 20.000000              #Adding atoms
       #Selecting Certain Atoms
      mol modselect 2 $mol_id y < $maxY and y > $minY and x < $maxX and x > $minX and z < $maxZ and z > $minZ
    }
	axes location Off
}

# Will load an xyz file
proc load_xyz { mol_id } {

	$backgrnd_mols
	mol modstyle 0 $mol_id CPK 0.500000 0.100000 20.000000 20.000000
	mol modmaterial 0 $mol_id Transparent
    mol modcolor 0 $mol_id ColorID 6

}

# Will render the picture and set the correct colors/do other aesthetic bits and bobs
proc render_pic { mol_id } {
    color Name H $Hcol
    color Name C $Ccol
    color Name N $Necol

    mol modmaterial 1 $mol_id $iso_material
    mol modmaterial 0 $mol_id $iso_material
    mol modmaterial 2 $mol_id $mol_material

    #color of isosurfaces'
    color change rgb 1  0.0 0.0 0.0

    draw text {$time_lab_x $time_lab_y $time_lab_z } $time_step

    color change rgb gray $backgrnd_R $backgrnd_G $backgrnd_B
    #color change rgb silver 0.7 0.7 0.7
    color Display Background gray
    display projection Orthographic
}

# Will delete a molecule representation
proc delete_file { } {
	mol delete all
}

# Will apply any rotations and zooms/translates
proc rotate_and_scale {  } {
   # IMPORTANT: The order of rotations matter here (must be Z, followed by Y followed by X)
   rotate z by $rotz
   rotate y by $roty
   rotate x by $rotx
   scale by $zoom_val
   translate by $trans_x $trans_y $trans_z
}

# Will set the colors of the IDs pointing to the isosurface colors
proc set_cols { ImPosCol ImNegCol RePosCol ReNegCol DensCol } {

   display depthcue off

   set IPRed [lindex [split $ImPosCol] 0 ]
   set IPGreen [lindex [split $ImPosCol] 1 ]
   set IPBlue [lindex [split $ImPosCol] 2 ]

   set INRed [lindex [split $ImNegCol] 0 ]
   set INGreen [lindex [split $ImNegCol] 1 ]
   set INBlue [lindex [split $ImNegCol] 2 ]

   set RPRed [lindex [split $RePosCol] 0 ]
   set RPGreen [lindex [split $RePosCol] 1 ]
   set RPBlue [lindex [split $RePosCol] 2 ]

   set RNRed [lindex [split $ReNegCol] 0 ]
   set RNGreen [lindex [split $ReNegCol] 1 ]
   set RNBlue [lindex [split $ReNegCol] 2 ]

   set DRed [lindex [split $DensCol] 0 ]
   set DGreen [lindex [split $DensCol] 1 ]
   set DBlue [lindex [split $DensCol] 2 ]

   color change rgb 18 $IPRed $IPGreen $IPBlue
   color change rgb 19 $INRed $INGreen $INBlue
   color change rgb 20 $RPRed $RPGreen $RPBlue
   color change rgb 21 $RNRed $RNGreen $RNBlue
   color change rgb 22 $DRed $DGreen $DBlue
}

# These are the dictionaries containing the colors of the isosurfaces
set Negcols $neg_cols
set Poscols $pos_cols

delete_file
set mol_id 0
foreach i {$cube_files} {  # Loop over all cube files

   echo "Cube File = " $i

   # Extract the color info from the dictionaries $neg_cols and $pos_cols
   set neg_col_id [dict get $Negcols $mol_id]  # set neg col for this isosurface
   set pos_col_id [dict get $Poscols $mol_id]  # set pos col for this isosurface


   # Call functions
   load_file $i $mol_id $neg_col_id $pos_col_id  # load cube file
   render_pic $mol_id  # make it prety

   set mol_id [expr $mol_id + 1] # increment counter
}
$bckg_mols_on_off load_xyz $mol_id

# Set the colors and rotate and scale
set_cols $imag_P_col $imag_N_col $real_P_col $real_N_col $dens_col
rotate_and_scale

source $vmd_source_file  # Load previous settings

material change opacity Translucent 0.460000
material change transmode Translucent 1.000000
material change ambient Translucent 0.100000

render Tachyon vmdscene.dat $tachyon_path -aasamples 12 vmdscene.dat -format TARGA -o $pic_filename -trans_max_surfaces 5 -res $pic_sizex $pic_sizey

rotate x by 360.000000
rotate x by -360.000000
scale by 1.000000
scale by 1.000000
